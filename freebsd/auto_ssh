#!/bin/sh
#$Id: auto_ssh 7 2016-02-26 09:57:48Z denis $
#TUNNEL_IP - IP сервера туннеля в местной локальной сети (на время наладки)
#TUNNEL_DOMAIN - домен сервера туннеля
#TUNNEL_PORT - порт SSH демона на сервере туннеля
#TUNNEL_USER - пользователь туннеля на сервере
#TUNNEL_BIND_PORT - SSH порт, организуемый на сервере туннеля для форвардинга соединений
#TARGET_HOST - хост, на который форвардится SSH соединение (обычно, 127.0.0.1 для управления инициирующим туннель компьютером)
#TARGET_PORT - порт, на который форвардится SSH соединение
#type crontab -e and put
#*/4    *       *       *       *           /etc/tasks/auto_ssh
# The next sample is wrong. "/dev/null 2>&1" is crap.
#*/4    *       *       *       *           /etc/tasks/auto_ssh  > /dev/null 2>&1


#TUNNEL_IP=192.168.1.60
TUNNEL_DOMAIN=example.com
TUNNEL_PORT=20022
TUNNEL_USER=sshtunnel
ALIVE_INTERVAL=60

OPTIONS_STRING="-R 192.168.1.60:30139:192.168.1.1:139 -R 192.168.1.60:30445:192.168.1.1:445 \
-R 192.168.1.60:30137:192.168.1.1:137 -R 192.168.1.60:30138:192.168.1.1:138 \
-R 192.168.1.60:32750:127.0.0.1:1944 -R 192.168.1.60:4242:192.168.1.20:80"

OPTIONS_STRING="-R 192.168.1.60:30139:192.168.1.1:139 -R 192.168.1.60:30445:192.168.1.1:445 \
-R 192.168.1.60:30081:192.168.1.1:81 \
-R 192.168.1.60:30137:192.168.1.1:137 -R 192.168.1.60:30138:192.168.1.1:138 \
-R 192.168.1.60:32750:127.0.0.1:1944 -R 192.168.1.60:4242:192.168.1.20:80 \
-R :44421:192.168.1.1:1944"

OPTIONS_STRING="-R 192.168.1.60:30139:192.168.1.1:139 -R 192.168.1.60:30445:192.168.1.1:445 \
-R 192.168.1.60:30081:192.168.1.1:81 \
-R 192.168.1.60:30137:192.168.1.1:137 -R 192.168.1.60:30138:192.168.1.1:138 \
-R 192.168.1.60:32750:127.0.0.1:1944 -R 192.168.1.60:4242:192.168.1.20:80 \
-R 44421:192.168.1.1:1944 -w 5:5"

OPTIONS_STRING="-R 44440:localhost:22"
OPTIONS_STRING="-R 44440:localhost:22 -R 40000:192.168.4.227:3389 \
-R 40001:192.168.4.1:4081 -R 40003:192.168.170.12:3389 \
-R 40004:192.168.120.11:3389 -R 40005:192.168.4.15:3389 \
-R 40006:192.168.120.40:3389 \
-R 40002"
#OPTIONS_STRING="-R 139:192.168.1.1:139 -R 445:127.0.0.1:445 -R 192.168.1.60:137:127.0.0.1:137 -R 192.168.1.60:138:127.0.0.1:138 -R 192.168.1.60:32750:127.0.0.1:1944 -R 192.168.1.60:4242:192.168.1.20:80"
#OPTIONS_STRING="-R 192.168.1.60:32750:127.0.0.1:1944 -R 192.168.1.60:4242:192.168.1.20:80"
#OPTIONS_STRING="-R 192.168.1.60:32750:127.0.0.1:1944 -R 192.168.1.60:4242:192.168.1.20:80 -R 192.168.1.60:1390:192.168.1.1:1390"


#Changes
# Example: CONNECT=`/usr/bin/sockstat | grep 8.8.8.8:20022 | awk '{print $2}'`
# Example: CONNECT=`/usr/bin/sockstat | grep  8.8.8.8:20022 | awk '{print $2}' | sed -n 1p` 

#This how to check script: /usr/bin/sockstat | grep  8.8.8.8:20022 | awk '{print $2}

### Получаем статус соединения (ssh)
## Статус при наличии домена в настройках
if [ "${TUNNEL_DOMAIN}" != "" ]; then
    # Получаем IP из домена
    #DOMAIN_IP=`/usr/bin/drill example.com | grep ^example.com | grep '[[:blank:]]A[[:blank:]]' | awk '{print $5}'`
    DOMAIN_IP=`/usr/bin/drill ${TUNNEL_DOMAIN} | grep ^${TUNNEL_DOMAIN} | grep '[[:blank:]]A[[:blank:]]' | awk '{print $5}'`
    echo DOMAIN_IP=${DOMAIN_IP}  
    # Получаем статус
    STATUS_CONNECT_DOMAIN=`/usr/bin/sockstat | grep ${DOMAIN_IP}:${TUNNEL_PORT} | awk '{print $2}' | sed -n 1p`
    echo STATUS_CONNECT_DOMAIN=${STATUS_CONNECT_DOMAIN}
fi
## /Статус при наличии домена в настройках
## Статус при наличии IP
if [ "${TUNNEL_IP}" != "" ]; then
    STATUS_CONNECT_IP=`/usr/bin/sockstat | grep ${TUNNEL_IP}:${TUNNEL_PORT} | awk '{print $2}' | sed -n 1p`
    echo STATUS_CONNECT_IP=${STATUS_CONNECT_IP}
fi
## /Статус при наличии IP
### /Получаем статус соединения (ssh)
if [ "${STATUS_CONNECT_IP}" = "ssh" -o "${STATUS_CONNECT_DOMAIN}" = "ssh" ]; then
    echo "The tunnel is online."
    exit 1
else
    echo "The tunnel is offline."
    echo "Now up the tunnel."
    if [ "${TUNNEL_DOMAIN}" != "" ]; then
        ssh -c aes256-gcm@openssh.com -o ServerAliveInterval=${ALIVE_INTERVAL} -f -N ${OPTIONS_STRING} ${TUNNEL_USER}@${TUNNEL_DOMAIN} -p${TUNNEL_PORT}
#	echo ${ALIVE_INTERVAL} -f -N ${OPTIONS_STRING} ${TUNNEL_USER}@${TUNNEL_DOMAIN} -p${TUNNEL_PORT} >> /var/log/ssh.log
    fi        
    if [ "${TUNNEL_IP}" != "" ]; then
        ssh -c aes256-gcm@openssh.com -o ServerAliveInterval=${ALIVE_INTERVAL} -f -N ${OPTIONS_STRING} ${TUNNEL_USER}@${TUNNEL_IP} -p${TUNNEL_PORT}
    fi
    exit 1
fi
